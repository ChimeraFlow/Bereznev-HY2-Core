package tech.bereznev.hy2.sdk

/**
 * üîç Hy2Log ‚Äî –º–æ–¥–µ–ª—å –∏ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ SDK.
 *
 * –≠—Ç–æ—Ç —Å–ª–æ–π —Å–ª—É–∂–∏—Ç –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –º–µ–∂–¥—É Kotlin-—á–∞—Å—Ç—å—é –∏ Go-—è–¥—Ä–æ–º.
 * –ù–∞ Android –ª–æ–≥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ AAR (—á–µ—Ä–µ–∑ gomobile.LogSink),
 * –Ω–∞ iOS ‚Äî –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ interop —Å XCFramework.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–≤—É–º—è –ø—É—Ç—è–º–∏:
 *  - SDK –≤–Ω—É—Ç—Ä–∏ –≤—ã–∑—ã–≤–∞–µ—Ç [Hy2LogSink.log];
 *  - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π sink –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ [Hy2.setLogSink].
 *
 * –§–æ—Ä–º–∞—Ç —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å Go-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π:
 *  "debug" | "info" | "warn" | "error".
 */
object Hy2Log {

    /** –í–æ–∑–º–æ–∂–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è SDK. */
    enum class Level(val tag: String) {
        DEBUG("debug"),
        INFO("info"),
        WARN("warn"),
        ERROR("error");

        companion object {
            /** –ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω—è –ø–æ —Å—Ç—Ä–æ–∫–µ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π). */
            fun from(tag: String?): Level = when (tag?.lowercase()) {
                "debug" -> DEBUG
                "info"  -> INFO
                "warn"  -> WARN
                "error" -> ERROR
                else    -> INFO
            }
        }
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤ emoji + —Ç—ç–≥ ‚Äî –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.
     * –ü—Ä–∏–º–µ—Ä: "‚öôÔ∏è [INFO] HY2 core started"
     */
    fun format(level: Level, message: String): String = when (level) {
        Level.DEBUG -> "üß© [DEBUG] $message"
        Level.INFO  -> "‚öôÔ∏è [INFO] $message"
        Level.WARN  -> "‚ö†Ô∏è [WARN] $message"
        Level.ERROR -> "‚ùå [ERROR] $message"
    }

    /**
     * –ë—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏).
     * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ sink.
     */
    fun print(level: Level, message: String) {
        println(format(level, message))
    }

    /** –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤. */
    fun d(msg: String) = print(Level.DEBUG, msg)
    fun i(msg: String) = print(Level.INFO, msg)
    fun w(msg: String) = print(Level.WARN, msg)
    fun e(msg: String) = print(Level.ERROR, msg)
}
