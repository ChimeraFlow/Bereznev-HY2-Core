//go:build android || ios || mobile_skel

package mobile

import (
	"context"
	"fmt"
	"net"
	"strconv"
	"sync"
	"time"

	socks5 "github.com/armon/go-socks5"
)

// –õ–æ–∫–∞–ª—å–Ω—ã–π SOCKS5-—Å–µ—Ä–≤–µ—Ä: 127.0.0.1:PORT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1080).
// –°–ª—É–∂–∏—Ç —Ü–µ–ª—å—é –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ A (TUN -> SOCKS).
//
// –í –ø—Ä–æ–¥–µ —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–π Dial —Å protectFD(fd) –¥–ª—è Android VpnService.

var (
	socksMu      sync.Mutex
	socksLn      net.Listener
	socksSrv     *socks5.Server
	socksAddr    = "127.0.0.1:1080"
	socksRunning bool
)

type countingConn struct{ net.Conn }

func (c *countingConn) Read(p []byte) (int, error) {
	n, err := c.Conn.Read(p)
	if n > 0 {
		bytesIn.Add(uint64(n))
	}
	return n, err
}
func (c *countingConn) Write(p []byte) (int, error) {
	n, err := c.Conn.Write(p)
	if n > 0 {
		bytesOut.Add(uint64(n))
	}
	return n, err
}

// StartLocalSocks –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π SOCKS5-—Å–µ—Ä–≤–µ—Ä –Ω–∞ host:port.
// –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = –æ–∫, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏.
func StartLocalSocks(host string, port int) string {
	socksMu.Lock()
	defer socksMu.Unlock()

	if socksRunning {
		logI("SOCKS already running at " + socksAddr)
		return ""
	}
	if host == "" {
		host = "127.0.0.1"
	}
	if port <= 0 {
		port = 1080
	}
	socksAddr = net.JoinHostPort(host, strconv.Itoa(port))

	// –∫–∞—Å—Ç–æ–º–Ω—ã–π Dial: –º–µ—Ä—è–µ–º "rtt", —Å—á–∏—Ç–∞–µ–º reconnects, –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ countingConn
	dial := func(ctx context.Context, network, addr string) (net.Conn, error) {
		start := time.Now()
		d := &net.Dialer{}
		c, err := d.DialContext(ctx, network, addr)
		elapsed := time.Since(start).Milliseconds()

		if err != nil {
			logW("SOCKS dial fail: " + err.Error())
			return nil, err
		}

		// üîí –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É —Å–æ–∫–µ—Ç–∞
		if tcpConn, ok := c.(*net.TCPConn); ok {
			raw, _ := tcpConn.File()
			if raw != nil {
				protectFD(int(raw.Fd()))
				_ = raw.Close() // –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥—É–±–ª–∏–∫–∞—Ç-–¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä
			}
		}

		quicRttMs.Store(elapsed)
		reconnects.Add(1)
		return &countingConn{Conn: c}, nil
	}

	conf := &socks5.Config{Dial: dial}
	srv, err := socks5.New(conf)
	if err != nil {
		logE("SOCKS init failed: " + err.Error())
		return "socks init failed: " + err.Error()
	}

	ln, err := net.Listen("tcp", socksAddr)
	if err != nil {
		logE("SOCKS listen failed: " + err.Error())
		return "socks listen failed: " + err.Error()
	}
	socksSrv = srv
	socksLn = ln
	socksRunning = true

	logI(fmt.Sprintf("SOCKS listening at %s", socksAddr))
	emit("socks_started", fmt.Sprintf(`{"addr":%q}`, socksAddr))

	safeGo(func() {
		if err := srv.Serve(ln); err != nil {
			logI("SOCKS serve stopped: " + err.Error())
		}
	})
	return ""
}

// StopLocalSocks –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π SOCKS5-—Å–µ—Ä–≤–µ—Ä.
func StopLocalSocks() {
	socksMu.Lock()
	defer socksMu.Unlock()

	if !socksRunning {
		return
	}
	_ = socksLn.Close()
	socksLn = nil
	socksSrv = nil
	socksRunning = false

	emit("socks_stopped", "{}")
	logI("SOCKS stopped")
}

func LocalSocksAddr() string {
	socksMu.Lock()
	defer socksMu.Unlock()
	return socksAddr
}

func StartLocalSocks1080() string { return StartLocalSocks("127.0.0.1", 1080) }

// (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ –∫–∞—Å—Ç–æ–º–Ω—ã–π Dial —Å protectFD:
// func protectDial(ctx context.Context, network, addr string) (net.Conn, error) {
// 	d := &net.Dialer{}
// 	c, err := d.DialContext(ctx, network, addr)
// 	if err != nil {
// 		return nil, err
// 	}
// 	// TODO: –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å fd –∏ –≤—ã–∑–≤–∞—Ç—å protectFD(fd) –Ω–∞ Android.
// 	return c, nil
// }
