//go:build android || ios

// Package mobile — мобильный слой SDK (gomobile bind).
//
// Этот файл — заглушка мостового слоя "TUN → SOCKS".
// Он предназначен для варианта архитектуры, где Android VpnService поднимает
// TUN-интерфейс, а весь трафик из TUN перенаправляется в локальный SOCKS
// (обычно 127.0.0.1:1080), за которым работает HY2-клиент.
//
// В прод-версии здесь появится реализация tun2socks (форк или альтернатива),
// с поддержкой UDP, защитой исходящих сокетов через NetHooks.Protect(fd),
// метриками и управлением жизненным циклом потока.
package mobile

// StartTun2Socks запускает мост TUN→SOCKS (вариант А архитектуры).
//
// Аргументы:
//   - tunFd     — файловый дескриптор TUN-интерфейса (выданный Android VpnService.establish()).
//   - socksHost — хост локального SOCKS-прокси (обычно "127.0.0.1").
//   - socksPort — порт локального SOCKS-прокси (обычно 1080).
//
// Контракт возврата:
//   - "" (пустая строка) — успешный запуск или принятие запроса к запуску;
//   - иначе — текст ошибки (для отображения в UI/логах).
//
// Потокобезопасность:
//   - Вызов потокобезопасен с точки зрения публичного API.
//   - Реальная реализация будет запускать фоновые горутины через safeGo(),
//     отслеживать жизненный цикл и корректно закрывать ресурсы.
//
// Платформенные заметки (Android):
//   - Перед установлением исходящих соединений мост должен вызывать protectFD(fd),
//     чтобы исключить собственные сокеты из VPN-туннеля и избежать рекурсии.
//   - MTU и offload лучше настраивать из tun_native.go (вариант B), если пойдём
//     путём "чистого sing-tun".
//
// TODO (реализация):
//  1. Интеграция с выбранной библиотекой tun2socks (или собственным бриджем).
//  2. Поддержка UDP-потока (важно для QUIC/HY2).
//  3. Метрики (bytes_in/out, rtt) и события ("reconnect", "warning").
//  4. Корректный shutdown на Stop() и при падении канала.
//  5. Юнит/интеграционные тесты и нагрузочные профили.
func StartTun2Socks(tunFd int, socksHost string, socksPort int) string {
	// Пока это скелет: просто логируем намерение.
	// В будущей реализации здесь:
	// - инициализация бриджа,
	// - запуск фонового копирования пакетов,
	// - обработка ошибок с emit(EvtError, ...),
	// - учёт метрик для HealthJSON().
	logI("StartTun2Socks() requested")
	return ""
}
