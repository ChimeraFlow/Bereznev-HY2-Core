//go:build mobile_skel

package socks

import (
	"strings"
	"sync"
	"testing"
)

// socksTestLogSink ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ª–æ–≥–æ–≤ –∏–∑ tun2socks.
type socksTestLogSink struct {
	mu   sync.Mutex
	logs []string
}

func (l *socksTestLogSink) Log(level, msg string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.logs = append(l.logs, level+":"+msg)
}

// TestStartTun2Socks_LogsAndOk ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ –ª–æ–≥–∏.
func TestStartTun2Socks_LogsAndOk(t *testing.T) {
	t.Log("üöÄ TestStartTun2Socks_LogsAndOk started")
	resetState()
	ls := &socksTestLogSink{}
	SetLogger(ls)

	// ‚öôÔ∏è —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ (tunFd —Ñ–µ–π–∫–æ–≤—ã–π, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —É–ø–∞—Å—Ç—å)
	err := StartTun2Socks(123, "127.0.0.1", 1080)
	if err != "" {
		t.Fatalf("unexpected error from StartTun2Socks: %q", err)
	}

	// üß© –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ª–æ–≥ –Ω–∞—á–∞–ª–∞ –∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	var logsCopy []string
	ls.mu.Lock()
	logsCopy = append([]string(nil), ls.logs...)
	ls.mu.Unlock()

	var started, success bool
	for _, line := range logsCopy {
		if strings.Contains(line, "starting tun2socks") {
			started = true
		}
		if strings.Contains(line, "tun2socks started successfully") {
			success = true
		}
	}

	if !started {
		t.Fatalf("expected log 'starting tun2socks', got logs: %#v", ls.logs)
	}
	if !success {
		t.Fatalf("expected log 'tun2socks started successfully', got logs: %#v", ls.logs)
	}

	// üß© –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å t2sRunning = true
	if !t2sRunning.Load() {
		t.Fatalf("expected t2sRunning=true after start")
	}

	// ‚öôÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—Å–∏–ª—Å—è
	StopTun2Socks()
	if t2sRunning.Load() {
		t.Fatalf("expected t2sRunning=false after stop")
	}
}
