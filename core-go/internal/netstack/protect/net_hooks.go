//go:build android || ios || mobile_skel

package protect

import (
	"sync"

	logpkg "github.com/ChimeraFlow/Bereznev-HY2-Core/core-go/pkg/logging"
)

var netHooks struct {
	mu      sync.RWMutex
	protect func(fd int) bool
}

// SetProtectHook ‚Äî –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è API (Kotlin ‚Üí Go).
// –ù–∞ Android –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ VpnService.protect(fd).
func SetProtectHook(fn func(fd int) bool) {
	netHooks.mu.Lock()
	defer netHooks.mu.Unlock()
	netHooks.protect = fn
	logpkg.Info("Protect hook registered")
}

// üîÑ Backward-compat shim –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ / API
// –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º Protect(fd int) bool.
func SetNetHooks(h interface{}) {
	netHooks.mu.Lock()
	defer netHooks.mu.Unlock()

	switch v := h.(type) {
	case interface{ Protect(fd int) bool }:
		netHooks.protect = v.Protect
	default:
		netHooks.protect = nil
	}
	logpkg.Info("Legacy SetNetHooks() adapter called")
}

// protectFD ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –∏–∑ —è–¥—Ä–∞.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ fd –∑–∞—â–∏—â—ë–Ω —É—Å–ø–µ—à–Ω–æ.
func ProtectFD(fd int) bool {
	netHooks.mu.RLock()
	defer netHooks.mu.RUnlock()
	if netHooks.protect == nil {
		return false
	}
	ok := netHooks.protect(fd)
	if !ok {
		logpkg.Warn("protectFD failed")
	}
	return ok
}
